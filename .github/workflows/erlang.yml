name: Erlang CI com OpenSUSE

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: opensuse/tumbleweed:latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Instalar dependências do sistema e Erlang
      run: |
        zypper refresh
        zypper install -y erlang git wget
        erl -version
      shell: bash

    - name: Configurar cache para Rebar3 e _build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/rebar3
          _build
        key: ${{ runner.os }}-opensuse-tumbleweed-${{ hashFiles('**/rebar.lock') }}
        restore-keys: |
          ${{ runner.os }}-opensuse-tumbleweed-

    - name: Instalar Rebar3
      run: |
        wget https://github.com/erlang/rebar3/releases/download/3.25.0/rebar3
        chmod +x rebar3
        ./rebar3 local install
        echo "$HOME/.cache/rebar3/bin" >> $GITHUB_PATH
        export PATH="$HOME/.cache/rebar3/bin:$PATH"
        rebar3 --version
      shell: bash

    - name: Compilar projeto (incluindo dependências se não cacheadas)
      run: |
        rebar3 compile
      shell: bash

    - name: Executar análise estática (Xref e Dialyzer)
      run: |
        rebar3 xref
        rebar3 dialyzer
      shell: bash

    - name: Rodar testes
      id: run_tests
      run: |
        DIAGNOSTIC=1 rebar3 do eunit, ct
      shell: bash

    - name: Upload rebar3 crashdump (se houver falha nos testes)
      if: failure() && steps.run_tests.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: rebar3-crashdump-${{ runner.os }}
        path: |
          rebar3.crashdump
          ./rebar3.crashdump
          _build/default/rebar3.crashdump
          _build/test/rebar3.crashdump
        if-no-files-found: ignore
