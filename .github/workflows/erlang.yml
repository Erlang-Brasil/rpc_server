name: Erlang CI com OpenSUSE Otimizado

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: opensuse/tumbleweed:latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Instalar dependências do sistema e Erlang
      id: setup_erlang # Adicionado id para referenciar a output
      run: |
        zypper refresh
        zypper install -y erlang git wget
        # Extrai e armazena a versão do Erlang/OTP para usar na chave de cache
        # Remove aspas da string da versão do OTP (ex: "25" -> 25)
        echo "ERLANG_OTP_RELEASE=$(erl -noshell -eval 'erlang:display(erlang:system_info(otp_release)), halt().' | tr -d '"')" >> $GITHUB_OUTPUT
        echo "Versão do Erlang/OTP instalada:"
        erl -version
      shell: bash

    - name: Configurar cache para Rebar3, dependências e _build
      id: cache_rebar_build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/rebar3
          _build
        # Chave de cache mais específica incluindo a versão do Erlang/OTP
        key: ${{ runner.os }}-opensuse-erlang-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}-rebar-${{ hashFiles('**/rebar.lock') }}
        # Chaves de restauração mais genéricas
        restore-keys: |
          ${{ runner.os }}-opensuse-erlang-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}-rebar-
          ${{ runner.os }}-opensuse-erlang-
          ${{ runner.os }}-opensuse-

    - name: Instalar Rebar3 (se não estiver no cache) e adicionar ao PATH
      run: |
        REBAR3_VERSION="3.25.0" # Especifique a versão desejada do Rebar3
        REBAR3_CACHE_BIN_DIR="$HOME/.cache/rebar3/bin" # Diretório padrão de instalação do 'rebar3 local install'
        REBAR3_EXEC="$REBAR3_CACHE_BIN_DIR/rebar3"

        # Garante que o diretório base do cache do rebar3 exista, pois 'local install' o usa.
        mkdir -p "$HOME/.cache/rebar3"

        if [ ! -f "$REBAR3_EXEC" ]; then
          echo "Rebar3 não encontrado em $REBAR3_EXEC. Instalando..."
          
          TEMP_WORK_DIR=$(mktemp -d) # Cria um diretório de trabalho temporário
          echo "Diretório de trabalho temporário para instalação do Rebar3: $TEMP_WORK_DIR"
          
          ORIGINAL_DIR=$(pwd) # Salva o diretório atual
          cd "$TEMP_WORK_DIR" # Entra no diretório temporário
          
          echo "Baixando Rebar3 ($REBAR3_VERSION) para $TEMP_WORK_DIR/rebar3..."
          # Baixa o rebar3 com o nome 'rebar3'
          wget -q https://github.com/erlang/rebar3/releases/download/${REBAR3_VERSION}/rebar3 -O rebar3
          chmod +x rebar3
          
          echo "Executando './rebar3 local install' a partir de $TEMP_WORK_DIR..."
          # Este comando faz com que o script ./rebar3 se instale em $HOME/.cache/rebar3/bin/rebar3
          ./rebar3 local install 
          
          cd "$ORIGINAL_DIR" # Retorna ao diretório original
          rm -rf "$TEMP_WORK_DIR" # Remove o diretório temporário
          
          if [ -f "$REBAR3_EXEC" ]; then
            echo "Rebar3 $REBAR3_VERSION instalado com sucesso em $REBAR3_EXEC."
          else
            echo "ERRO CRÍTICO: Falha ao instalar o Rebar3 em $REBAR3_EXEC."
            echo "Verifique se o diretório $REBAR3_CACHE_BIN_DIR existe e tem permissões corretas."
            if [ -d "$REBAR3_CACHE_BIN_DIR" ]; then
              echo "Conteúdo de $REBAR3_CACHE_BIN_DIR:"
              ls -la "$REBAR3_CACHE_BIN_DIR"
            else
              echo "$REBAR3_CACHE_BIN_DIR não foi criado."
            fi
            exit 1
          fi
        else
          echo "Rebar3 encontrado em $REBAR3_EXEC (provavelmente restaurado do cache)."
        fi
        
        echo "Adicionando $REBAR3_CACHE_BIN_DIR ao GITHUB_PATH para passos subsequentes."
        echo "$REBAR3_CACHE_BIN_DIR" >> $GITHUB_PATH
        
        echo "Verificando a versão do Rebar3 instalado diretamente em $REBAR3_EXEC:"
        if [ -f "$REBAR3_EXEC" ]; then
          "$REBAR3_EXEC" --version
        else
          # Esta condição não deveria ser alcançada se a lógica acima estiver correta
          echo "ERRO: Rebar3 não foi encontrado em $REBAR3_EXEC após a tentativa de instalação/cache."
          exit 1
        fi
        echo "O comando 'rebar3' estará disponível no PATH para os próximos passos via GITHUB_PATH."
      shell: bash

    - name: Compilar projeto (incluindo dependências se não cacheadas)
      run: |
        # Rebar3 deve estar no PATH devido ao GITHUB_PATH configurado no passo anterior
        echo "PATH atual no passo 'Compilar projeto': $PATH" 
        echo "Verificando localização do rebar3:"
        which rebar3
        echo "Verificando rebar3 antes de compilar:"
        rebar3 --version
        
        echo "Limpando compilações anteriores..."
        rebar3 clean 
        
        echo "Compilando o projeto..."
        rebar3 compile
      shell: bash

    - name: Executar análise estática (Xref e Dialyzer)
      run: |
        # Rebar3 deve estar no PATH
        echo "Executando Xref..."
        rebar3 xref
        
        echo "Executando Dialyzer (pode demorar na primeira vez ou após mudança na versão do Erlang/OTP)..."
        rebar3 dialyzer 
      shell: bash

    - name: Rodar testes
      id: run_tests
      run: |
        # Rebar3 deve estar no PATH
        echo "Executando testes (EUnit e Common Test)..."
        DIAGNOSTIC=1 rebar3 do eunit, ct
      shell: bash

    - name: Upload rebar3 crashdump (se houver falha nos testes)
      if: steps.run_tests.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: rebar3-crashdump-${{ runner.os }}-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}
        path: |
          rebar3.crashdump
          ./rebar3.crashdump
          _build/default/rebar3.crashdump
          _build/test/rebar3.crashdump
        if-no-files-found: ignore 
