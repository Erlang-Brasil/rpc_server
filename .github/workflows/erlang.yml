name: Erlang CI com OpenSUSE Otimizado

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: opensuse/tumbleweed:latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Instalar dependências do sistema e Erlang
      id: setup_erlang # Adicionado id para referenciar a output
      run: |
        zypper refresh
        zypper install -y erlang git wget
        # Extrai e armazena a versão do Erlang/OTP para usar na chave de cache
        # Remove aspas da string da versão do OTP (ex: "25" -> 25)
        echo "ERLANG_OTP_RELEASE=$(erl -noshell -eval 'erlang:display(erlang:system_info(otp_release)), halt().' | tr -d '"')" >> $GITHUB_OUTPUT
        echo "Versão do Erlang/OTP instalada:"
        erl -version
      shell: bash

    # O cache é configurado ANTES da instalação do Rebar3 para que possa restaurar o binário do Rebar3 se já estiver no cache.
    # O passo de instalação do Rebar3 então verifica se ele foi restaurado ou precisa ser baixado.
    - name: Configurar cache para Rebar3, dependências e _build
      id: cache_rebar_build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/rebar3
          _build
        # Chave de cache mais específica incluindo a versão do Erlang/OTP
        key: ${{ runner.os }}-opensuse-erlang-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}-rebar-${{ hashFiles('**/rebar.lock') }}
        # Chaves de restauração mais genéricas
        restore-keys: |
          ${{ runner.os }}-opensuse-erlang-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}-rebar-
          ${{ runner.os }}-opensuse-erlang-
          ${{ runner.os }}-opensuse-

    - name: Instalar Rebar3 (se não estiver no cache) e adicionar ao PATH
      run: |
        REBAR3_VERSION="3.25.0" # Especifique a versão desejada do Rebar3
        REBAR3_TARGET_DIR="$HOME/.cache/rebar3/bin" # Diretório onde 'rebar3 local install' coloca o executável
        REBAR3_EXEC="$REBAR3_TARGET_DIR/rebar3"

        # Garante que o diretório de destino exista
        mkdir -p "$REBAR3_TARGET_DIR"

        # Verifica se o rebar3 está presente (pode ter sido restaurado do cache via ~/.cache/rebar3)
        if [ ! -f "$REBAR3_EXEC" ]; then
          echo "Rebar3 não encontrado em $REBAR3_EXEC (provavelmente não estava no cache ou é a primeira execução), instalando..."
          # Baixa uma cópia temporária do rebar3 para executar 'local install'
          wget https://github.com/erlang/rebar3/releases/download/${REBAR3_VERSION}/rebar3 -O ./rebar3_temp_download
          chmod +x ./rebar3_temp_download
          
          # Instala o rebar3 no diretório $HOME/.cache/rebar3/bin/
          # Este diretório é coberto pelo 'actions/cache' configurado acima
          ./rebar3_temp_download local install
          rm ./rebar3_temp_download
          
          if [ -f "$REBAR3_EXEC" ]; then
            echo "Rebar3 $REBAR3_VERSION instalado com sucesso em $REBAR3_EXEC."
          else
            echo "ERRO: Falha ao instalar o Rebar3 em $REBAR3_EXEC após o download e 'local install'."
            exit 1
          fi
        else
          echo "Rebar3 encontrado em $REBAR3_EXEC (provavelmente restaurado do cache)."
        fi
        
        # Adiciona o diretório do rebar3 ao GITHUB_PATH para que esteja disponível em todos os passos subsequentes
        # GITHUB_PATH garante que o diretório seja pré-pendente ao PATH do sistema
        echo "$REBAR3_TARGET_DIR" >> $GITHUB_PATH
        
        echo "Verificando a versão do rebar3 (deve estar no PATH agora):"
        rebar3 --version
      shell: bash

    - name: Compilar projeto (incluindo dependências se não cacheadas)
      run: |
        # Rebar3 deve estar no PATH devido ao GITHUB_PATH configurado no passo anterior
        echo "PATH atual no passo 'Compilar projeto': $PATH" # Para depuração
        echo "Verificando rebar3 antes de compilar:"
        rebar3 --version
        
        echo "Limpando compilações anteriores..."
        rebar3 clean # Garante uma compilação limpa antes de prosseguir
        
        echo "Compilando o projeto..."
        rebar3 compile
      shell: bash

    - name: Executar análise estática (Xref e Dialyzer)
      run: |
        # Rebar3 deve estar no PATH
        echo "Executando Xref..."
        rebar3 xref
        
        echo "Executando Dialyzer (pode demorar na primeira vez ou após mudança na versão do Erlang/OTP)..."
        # A construção/atualização do PLT do Dialyzer se beneficiará da chave de cache específica
        # e do rebar3 clean no passo anterior, garantindo que analise o código mais recente.
        rebar3 dialyzer 
      shell: bash

    - name: Rodar testes
      id: run_tests
      run: |
        # Rebar3 deve estar no PATH
        echo "Executando testes (EUnit e Common Test)..."
        DIAGNOSTIC=1 rebar3 do eunit, ct
      shell: bash

    - name: Upload rebar3 crashdump (se houver falha nos testes)
      # Executa somente se o passo 'run_tests' falhar
      if: steps.run_tests.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: rebar3-crashdump-${{ runner.os }}-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}
        path: |
          rebar3.crashdump
          ./rebar3.crashdump
          _build/default/rebar3.crashdump
          _build/test/rebar3.crashdump
        if-no-files-found: ignore # Não falhar se nenhum arquivo de crashdump for encontrado
