name: Erlang CI com OpenSUSE Latest Otimizado

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: opensuse/tumbleweed:latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Instalar dependências do sistema e Erlang
      id: setup_erlang
      run: |
        zypper refresh
        # Adicionado 'which' à lista de pacotes para instalação
        zypper install -y erlang git wget bash which
        echo "Verificando presença do bash:"
        which bash
        ls -l /bin/bash
        echo "ERLANG_OTP_RELEASE=$(erl -noshell -eval 'erlang:display(erlang:system_info(otp_release)), halt().' | tr -d '"')" >> $GITHUB_OUTPUT
        echo "Versão do Erlang/OTP instalada:"
        erl -version
      shell: bash

    - name: Configurar cache para Rebar3, dependências e _build
      id: cache_rebar_build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/rebar3
          _build
        key: ${{ runner.os }}-opensuse-erlang-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}-rebar-${{ hashFiles('**/rebar.lock') }}
        restore-keys: |
          ${{ runner.os }}-opensuse-erlang-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}-rebar-
          ${{ runner.os }}-opensuse-erlang-
          ${{ runner.os }}-opensuse-

    - name: Instalar Rebar3 (se não estiver no cache) e configurar ENV var
      run: |
        REBAR3_VERSION="3.25.0"
        REBAR3_CACHE_BIN_DIR="$HOME/.cache/rebar3/bin"
        REBAR3_EXEC="$REBAR3_CACHE_BIN_DIR/rebar3"

        mkdir -p "$REBAR3_CACHE_BIN_DIR" # Garante que o diretório de destino do binário do rebar3 exista

        if [ ! -f "$REBAR3_EXEC" ]; then
          echo "Rebar3 não encontrado em $REBAR3_EXEC. Instalando..."

          TEMP_WORK_DIR=$(mktemp -d)
          echo "Diretório de trabalho temporário para instalação do Rebar3: $TEMP_WORK_DIR"

          ORIGINAL_DIR=$(pwd)
          cd "$TEMP_WORK_DIR"

          echo "Baixando Rebar3 ($REBAR3_VERSION) para $TEMP_WORK_DIR/rebar3..."
          wget -q https://github.com/erlang/rebar3/releases/download/${REBAR3_VERSION}/rebar3 -O rebar3
          chmod +x rebar3

          echo "Executando './rebar3 local install' a partir de $TEMP_WORK_DIR..."
          # Este comando instala o rebar3 em $HOME/.cache/rebar3/bin/rebar3
          ./rebar3 local install

          cd "$ORIGINAL_DIR"
          rm -rf "$TEMP_WORK_DIR"

          if [ -f "$REBAR3_EXEC" ]; then
            echo "Rebar3 $REBAR3_VERSION instalado com sucesso em $REBAR3_EXEC."
          else
            echo "ERRO CRÍTICO: Falha ao instalar o Rebar3 em $REBAR3_EXEC."
            exit 1
          fi
        else
          echo "Rebar3 encontrado em $REBAR3_EXEC (provavelmente restaurado do cache)."
        fi

        # Define a variável de ambiente para os próximos passos
        echo "REBAR3_INSTALL_DIR=${REBAR3_CACHE_BIN_DIR}" >> $GITHUB_ENV
        echo "REBAR3_INSTALL_DIR configurado para: ${REBAR3_CACHE_BIN_DIR}"

        echo "Verificando a versão do Rebar3 instalado diretamente em $REBAR3_EXEC:"
        "$REBAR3_EXEC" --version
      shell: bash

    - name: Compilar projeto (incluindo dependências se não cacheadas)
      run: |
        # Adiciona o diretório do rebar3 ao PATH no início deste passo
        export PATH="${REBAR3_INSTALL_DIR}:$PATH"
        echo "PATH atualizado no passo 'Compilar projeto': $PATH"
        echo "Verificando localização do rebar3:"
        which rebar3
        rebar3 --version

        echo "Limpando compilações anteriores..."
        rebar3 clean

        echo "Compilando o projeto..."
        rebar3 compile
      shell: bash

    - name: Executar análise estática (Xref e Dialyzer)
      run: |
        # Adiciona o diretório do rebar3 ao PATH no início deste passo
        export PATH="${REBAR3_INSTALL_DIR}:$PATH"
        echo "PATH atualizado no passo 'Análise Estática': $PATH"
        rebar3 xref
        rebar3 dialyzer
      shell: bash

    - name: Rodar testes
      id: run_tests
      run: |
        # Adiciona o diretório do rebar3 ao PATH no início deste passo
        export PATH="${REBAR3_INSTALL_DIR}:$PATH"
        echo "PATH atualizado no passo 'Rodar testes': $PATH"
        DIAGNOSTIC=1 rebar3 do eunit, ct
      shell: bash

    - name: Upload rebar3 crashdump (se houver falha nos testes)
      if: steps.run_tests.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: rebar3-crashdump-${{ runner.os }}-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}
        path: |
          rebar3.crashdump
          ./rebar3.crashdump
          _build/default/rebar3.crashdump
          _build/test/rebar3.crashdump
        if-no-files-found: ignore