name: Erlang CI Otimizado

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: opensuse/tumbleweed:latest

    steps:
    - name: 1. Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 2. Instalar dependências do sistema e Erlang
      id: setup_erlang
      run: |
        zypper --non-interactive refresh
        zypper --non-interactive install -y erlang git wget bash which
        echo "ERLANG_OTP_RELEASE=$(erl -noshell -eval 'erlang:display(erlang:system_info(otp_release)), halt().' | tr -d '"')" >> $GITHUB_OUTPUT
        echo "Versão do Erlang/OTP instalada: $(erl -version)"
      shell: bash

    - name: 3. Instalar Rebar3 (Versão Corrigida)
      id: install_rebar3
      run: |
        # Fixando em uma versão estável e mais recente para evitar bugs e falhas na API do GitHub.
        REBAR3_VERSION="3.26.0"
        echo "Instalando Rebar3 versão: ${REBAR3_VERSION}"
        
        REBAR3_BIN_DIR="$HOME/.local/bin"
        mkdir -p "$REBAR3_BIN_DIR"
        
        wget -q https://github.com/erlang/rebar3/releases/download/${REBAR3_VERSION}/rebar3 -O "${REBAR3_BIN_DIR}/rebar3"
        chmod +x "${REBAR3_BIN_DIR}/rebar3"
        
        # 1. Adiciona o diretório ao PATH para os PASSOS SEGUINTES.
        echo "${REBAR3_BIN_DIR}" >> $GITHUB_PATH
        
        # 2. (A CORREÇÃO) Adiciona o diretório ao PATH para o PASSO ATUAL.
        export PATH="${REBAR3_BIN_DIR}:$PATH"
        
        echo "Rebar3 instalado em: $(which rebar3)"
        rebar3 --version
      shell: bash

    - name: 4. Configurar e Restaurar Cache
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/rebar3
          _build
        key: ci-cache-${{ runner.os }}-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}-${{ hashFiles('**/rebar.lock') }}
        restore-keys: |
          ci-cache-${{ runner.os }}-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}-

    - name: 5. Compilar dependências e projeto
      id: compile
      run: |
        rebar3 compile
      shell: bash

    - name: 6. Executar análise estática (Xref)
      id: xref
      run: |
        rebar3 xref
      shell: bash

    - name: 7. Executar análise de tipos (Dialyzer)
      id: dialyzer
      run: |
        DIAGNOSTIC=1 rebar3 dialyzer
      shell: bash

    - name: 8. Rodar testes (EUnit e Common Test)
      id: tests
      run: |
        DIAGNOSTIC=1 rebar3 do eunit, ct
      shell: bash

    - name: 9. Upload de crashdump (em caso de falha)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: rebar3-crashdump-${{ runner.os }}-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}
        path: |
          rebar3.crashdump
          ./rebar3.crashdump
          _build/default/rebar3.crashdump
          _build/test/rebar3.crashdump
        # Alterado para 'warn' para não gerar um erro se o crashdump não existir.
        if-no-files-found: warn