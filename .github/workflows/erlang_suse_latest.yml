name: Erlang CI com OpenSUSE Latest Otimizado e Corrigido

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: opensuse/tumbleweed:latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        # Fetch all history for all branches and tags
        fetch-depth: 0
        # For pull requests, checkout the head of the PR branch.
        # For other events (like push to main), it will checkout the commit that triggered the workflow (github.ref).
        ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.ref }}

    - name: Instalar dependências do sistema e Erlang
      id: setup_erlang
      run: |
        zypper refresh
        zypper install -y erlang git wget bash which findutils
        echo "Verificando presença do bash:"
        which bash
        ls -l /bin/bash
        echo "Verificando presença do git:"
        which git
        git --version
        echo "Verificando presença do find:"
        which find
        echo "ERLANG_OTP_RELEASE=$(erl -noshell -eval 'erlang:display(erlang:system_info(otp_release)), halt().' | tr -d '"')" >> $GITHUB_OUTPUT
        echo "Versão do Erlang/OTP instalada:"
        erl -version
      shell: bash

    - name: Debug Verificar Checkout Inicial
      run: |
        echo "Evento GitHub: ${{ github.event_name }}"
        echo "Ref GitHub: ${{ github.ref }}"
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "PR Head SHA: ${{ github.event.pull_request.head.sha }}"
          echo "PR Base SHA: ${{ github.event.pull_request.base.sha }}"
        fi
        echo "Diretório atual: $(pwd)"
        echo "Variável GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "Listando conteúdo do diretório atual ($GITHUB_WORKSPACE):"
        ls -la
        echo "---"
        echo "Saída do git status:"
        git status || echo "git status falhou"
        echo "---"
        echo "Saída do git branch -avv (mostra todas as branches e rastreamento):"
        git branch -avv || echo "git branch -avv falhou"
        echo "---"
        echo "Commit atual (git log -1):"
        git log -1 --pretty="Commit: %H%nAutor: %an%nData: %ad%nAssunto: %s" || echo "git log -1 falhou"
        echo "---"
        echo "Últimos 5 commits (gráfico):"
        git log --graph --oneline --all -5 || echo "git log graph falhou"
        echo "---"
        echo "Verificando o código fonte de src/shell/rpc_server_shell_instance.erl ANTES de qualquer compilação:"
        SOURCE_FILE_TO_CHECK="src/shell/rpc_server_shell_instance.erl"
        if [ -f "$SOURCE_FILE_TO_CHECK" ]; then
          echo "--- Conteúdo de $SOURCE_FILE_TO_CHECK ---"
          cat "$SOURCE_FILE_TO_CHECK"
          echo "--- Fim do conteúdo de $SOURCE_FILE_TO_CHECK ---"
        else
          echo "Arquivo fonte $SOURCE_FILE_TO_CHECK não encontrado no checkout inicial."
        fi
      shell: bash

    # O PASSO DE CACHE FOI REMOVIDO PARA GARANTIR UM AMBIENTE COMPLETAMENTE LIMPO
    # E EVITAR INTERFERÊNCIA DE CACHES DESATUALIZADOS DO REBAR3 OU _BUILD.

    - name: Instalar Rebar3 e configurar ENV var
      id: install_rebar3 # Renomeado para clareza, já que o cache não é mais usado para isso
      run: |
        REBAR3_VERSION="3.25.0" # Considere usar uma versão mais recente se disponível/necessário
        # Instala rebar3 em um local dentro do GITHUB_WORKSPACE para evitar problemas de permissão
        # e garantir que seja limpo entre as execuções, se não for $HOME.
        # No entanto, $HOME/.cache é um local comum. Se houver problemas de persistência,
        # instalar em $GITHUB_WORKSPACE/rebar3_temp_install_dir pode ser uma alternativa.
        REBAR3_INSTALL_TARGET_DIR="$HOME/.cache/rebar3" # Diretório base para a instalação do rebar3
        REBAR3_BIN_DIR="$REBAR3_INSTALL_TARGET_DIR/bin"
        REBAR3_EXEC="$REBAR3_BIN_DIR/rebar3"

        echo "Limpando diretório de instalação anterior do Rebar3 (se existir): $REBAR3_INSTALL_TARGET_DIR"
        rm -rf "$REBAR3_INSTALL_TARGET_DIR"
        mkdir -p "$REBAR3_BIN_DIR"

        echo "Rebar3 não será restaurado do cache. Instalando..."
        TEMP_WORK_DIR=$(mktemp -d)
        ORIGINAL_DIR=$(pwd)
        cd "$TEMP_WORK_DIR"
        echo "Baixando Rebar3 ($REBAR3_VERSION) para $TEMP_WORK_DIR/rebar3..."
        wget -q https://github.com/erlang/rebar3/releases/download/${REBAR3_VERSION}/rebar3 -O rebar3
        chmod +x rebar3
        echo "Executando './rebar3 local install' (instalando em $REBAR3_INSTALL_TARGET_DIR)..."
        # O 'local install' do rebar3 geralmente instala em ~/.cache/rebar3/bin por padrão.
        # Para forçar a instalação no REBAR3_BIN_DIR, precisaríamos de uma abordagem diferente
        # ou garantir que o 'local install' use o $HOME correto dentro do container.
        # A maneira mais simples é copiar o executável baixado diretamente.
        cp rebar3 "$REBAR3_EXEC"
        # ./rebar3 local install # Esta linha pode ser desnecessária se copiarmos diretamente.
        # Vamos manter o local install por enquanto, ele é mais robusto para pegar a estrutura correta.
        # No entanto, o rebar3 local install já coloca em $HOME/.cache/rebar3/bin, que é o nosso REBAR3_EXEC
        ./rebar3 local install 

        cd "$ORIGINAL_DIR"
        rm -rf "$TEMP_WORK_DIR"
        
        if [ ! -f "$REBAR3_EXEC" ]; then
          echo "ERRO CRÍTICO: Falha ao instalar o Rebar3 em $REBAR3_EXEC."
          # Tentar uma cópia direta como fallback se 'local install' não funcionar como esperado
          echo "Tentando copiar o executável do Rebar3 diretamente para $REBAR3_EXEC..."
          # Re-download e cópia direta se o local install falhou
          # (Essa lógica de fallback pode ser complexa, melhor garantir que o 'local install' funcione)
          # Por agora, vamos confiar no 'local install'. Se persistir o erro, revisamos.
          exit 1
        fi
        echo "Rebar3 $REBAR3_VERSION instalado com sucesso em $REBAR3_EXEC."
        
        echo "REBAR3_INSTALL_DIR=${REBAR3_BIN_DIR}" >> $GITHUB_ENV
        echo "REBAR3_INSTALL_DIR configurado para: ${REBAR3_BIN_DIR}"
        "$REBAR3_EXEC" --version
      shell: bash

    - name: Compilar projeto
      run: |
        export PATH="${REBAR3_INSTALL_DIR}:$PATH"
        echo "PATH atualizado no passo 'Compilar projeto': $PATH"
        which rebar3
        rebar3 --version
        echo "Limpando TODAS as compilações anteriores..."
        rebar3 clean --all
        echo "Compilando o projeto..."
        rebar3 compile
      shell: bash

    - name: Debug Verificar arquivos e artefatos antes da analise
      run: |
        export PATH="${REBAR3_INSTALL_DIR}:$PATH"
        echo "PATH atualizado no passo 'Debug Verificar arquivos': $PATH"

        echo "Limpando TODAS as compilações anteriores (novamente para garantir)..."
        rebar3 clean --all
        echo "Compilando o projeto (novamente para garantir artefatos frescos)..."
        rebar3 compile
        
        SOURCE_FILE="src/shell/rpc_server_shell_instance.erl"
        APP_NAME="rpc_server" 
        BEAM_FILE_DIR="_build/default/lib/${APP_NAME}/ebin"
        BEAM_FILE="${BEAM_FILE_DIR}/rpc_server_shell_instance.beam"
        MODULE_NAME="rpc_server_shell_instance"

        echo "Conteúdo de $SOURCE_FILE (após compilação neste passo):"
        if [ -f "$SOURCE_FILE" ]; then
          echo "--- Conteúdo de $SOURCE_FILE ---"
          cat "$SOURCE_FILE"
          echo "--- Fim do conteúdo de $SOURCE_FILE ---"
        else
          echo "Arquivo fonte $SOURCE_FILE não encontrado."
        fi
        
        echo "Verificando BEAM file: $BEAM_FILE"
        if [ -d "$BEAM_FILE_DIR" ]; then
          echo "Listando conteúdo de $BEAM_FILE_DIR:"
          ls -la "$BEAM_FILE_DIR"
          if [ -f "$BEAM_FILE" ]; then
            echo "Detalhes do BEAM file ($BEAM_FILE) (timestamp, tamanho):"
            ls -l "$BEAM_FILE"
            echo "Verificando de onde o Erlang carregaria o módulo $MODULE_NAME:"
            erl -noshell -eval "io:format(\"code:which(~s) -> ~p~n\", [\"${MODULE_NAME}\", code:which(${MODULE_NAME})]), halt()." || echo "Falha ao verificar code:which"
          else
            echo "Arquivo BEAM $BEAM_FILE não encontrado no diretório $BEAM_FILE_DIR."
          fi
        else
          echo "Diretório de BEAM files $BEAM_FILE_DIR não encontrado."
        fi
      shell: bash

    - name: Executar análise estática (Xref e Dialyzer)
      run: |
        export PATH="${REBAR3_INSTALL_DIR}:$PATH"
        echo "PATH atualizado no passo 'Análise Estática': $PATH"
        
        echo "LIMPANDO TUDO E RECOMPILANDO ANTES DA ANÁLISE ESTÁTICA"
        rebar3 clean --all # Garante que não há artefatos antigos de compilação
        rebar3 compile    # Compila o código que foi feito checkout e limpo

        echo "Verificando o código fonte de src/shell/rpc_server_shell_instance.erl IMEDIATAMENTE ANTES do XREF:"
        SOURCE_FILE_TO_CHECK_AGAIN="src/shell/rpc_server_shell_instance.erl"
        if [ -f "$SOURCE_FILE_TO_CHECK_AGAIN" ]; then
          echo "--- Conteúdo de $SOURCE_FILE_TO_CHECK_AGAIN ANTES DO XREF ---"
          cat "$SOURCE_FILE_TO_CHECK_AGAIN"
          echo "--- Fim do conteúdo de $SOURCE_FILE_TO_CHECK_AGAIN ANTES DO XREF ---"
        else
          echo "ARQUIVO FONTE $SOURCE_FILE_TO_CHECK_AGAIN NÃO ENCONTRADO IMEDIATAMENTE ANTES DO XREF."
        fi

        echo "Executando rebar3 xref..."
        rebar3 xref
        XREF_STATUS=$?
        if [ $XREF_STATUS -ne 0 ]; then
          echo "rebar3 xref falhou com status $XREF_STATUS (ou emitiu avisos tratados como erros)"
          # Considerar sair se xref falhar e for crítico: exit $XREF_STATUS
        fi
        echo "rebar3 xref concluído."

        echo "Executando rebar3 dialyzer..."
        rebar3 dialyzer
        DIALYZER_STATUS=$?
        if [ $DIALYZER_STATUS -ne 0 ]; then
          echo "rebar3 dialyzer falhou com status $DIALYZER_STATUS"
          exit $DIALYZER_STATUS
        fi
        echo "rebar3 dialyzer concluído com sucesso."
      shell: bash

    - name: Rodar testes
      id: run_tests
      run: |
        export PATH="${REBAR3_INSTALL_DIR}:$PATH"
        echo "PATH atualizado no passo 'Rodar testes': $PATH"
        echo "LIMPANDO TUDO E RECOMPILANDO ANTES DOS TESTES"
        rebar3 clean --all 
        rebar3 compile
        DIAGNOSTIC=1 rebar3 do eunit, ct
      shell: bash

    - name: Upload rebar3 crashdump (se houver falha nos testes)
      if: steps.run_tests.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: rebar3-crashdump-${{ runner.os }}-${{ steps.setup_erlang.outputs.ERLANG_OTP_RELEASE }}
        path: |
          rebar3.crashdump
          ./rebar3.crashdump
          _build/default/rebar3.crashdump
          _build/test/rebar3.crashdump
        if-no-files-found: ignore

